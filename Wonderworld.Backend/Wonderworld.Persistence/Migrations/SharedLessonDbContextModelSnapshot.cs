// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wonderworld.Persistence;

#nullable disable

namespace Wonderworld.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    partial class SharedLessonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassReceiverId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserReceiverId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("ReviewId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("6fb253d4-16da-4052-8ac2-f814c9fd3329"),
                            Title = "Russian language"
                        },
                        new
                        {
                            DisciplineId = new Guid("64f18997-3969-4b94-a9a8-d3a79555f7bd"),
                            Title = "Russian literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("d4983188-37e5-4133-8460-0d1bc1c131f9"),
                            Title = "English as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("3281a15b-33a1-42ec-bb22-5160385f3d54"),
                            Title = "German as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("0a8b7c59-30c5-431c-8498-00c86ac90d16"),
                            Title = "French as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("465fdb2e-da4d-4b29-a3b0-8fd837d871cd"),
                            Title = "Italian as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("14f19732-d7ba-422b-abc7-4a53d5c698fd"),
                            Title = "Spanish as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("397880bf-14dd-4d8a-9991-085f742531e0"),
                            Title = "Chinese as a foreign language"
                        },
                        new
                        {
                            DisciplineId = new Guid("98095369-2efb-418c-9f39-e3b2b3bcb064"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("d0e235c0-d11a-4025-affc-d415e59156cd"),
                            Title = "Social science"
                        },
                        new
                        {
                            DisciplineId = new Guid("ba5508ee-e118-4538-a7fd-7f79530ba719"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("9b959eed-1113-4c97-8e86-1ff23e1cab14"),
                            Title = "Astronomy"
                        },
                        new
                        {
                            DisciplineId = new Guid("b4e56cde-4221-4b9d-b20a-3a6df1fe1d47"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("825691b3-7b0f-4c68-b8a8-ebbfe5ec0254"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("080520c4-f132-4280-a56f-edd8bb5eecef"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("fe506683-cd7a-42a2-b3a2-f46924f1f83f"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("30e89fcb-ff3d-48ab-b925-6128e67d732c"),
                            Title = "Computer science"
                        },
                        new
                        {
                            DisciplineId = new Guid("960924c3-2c5f-4eef-bb2d-c39241fd8b43"),
                            Title = "Technology"
                        },
                        new
                        {
                            DisciplineId = new Guid("1809d5e0-9242-4f8f-9ede-6911164979b9"),
                            Title = "World art"
                        },
                        new
                        {
                            DisciplineId = new Guid("1063ef8a-5991-44dc-946b-f04ad0b667c7"),
                            Title = "Fine arts"
                        },
                        new
                        {
                            DisciplineId = new Guid("a1d5124a-4034-42c8-8c58-9bc0de7b7a34"),
                            Title = "Crafts"
                        },
                        new
                        {
                            DisciplineId = new Guid("25ed0b42-e0c6-445b-9fbc-fd67d4dad47b"),
                            Title = "Natural science"
                        },
                        new
                        {
                            DisciplineId = new Guid("739d6c3f-1c9f-4caa-a317-e2cee1a2e623"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("54a8717f-e4e1-439c-a86a-662aec135f7a"),
                            Title = "Economics"
                        },
                        new
                        {
                            DisciplineId = new Guid("509f610a-e920-47ed-ab07-d6bf91cc8b8b"),
                            Title = "Regional studies"
                        },
                        new
                        {
                            DisciplineId = new Guid("a0fe39d2-b81b-4b44-8612-1f553d6e5efd"),
                            Title = "Project-based learning"
                        },
                        new
                        {
                            DisciplineId = new Guid("9c79a7c0-4dbc-4fa0-96b9-1c9b65218026"),
                            Title = "Cultural exchange"
                        },
                        new
                        {
                            DisciplineId = new Guid("a8eecc7a-16fd-4ff1-ae4f-a0e5a4070d61"),
                            Title = "Vacation education"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("6e268545-e22b-4098-8a79-b1f9c15cba98"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("4d2fb8cd-6c92-4e76-b055-a73283e416b2"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("7b9eb02b-490f-4d03-a557-75d037a193f2"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("c7c9f197-19d6-412d-b3cf-33ed5b65e752"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("cf644926-9560-46b0-9ccc-1f754ffb53e8"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("8a148313-acec-4b3e-a695-84dc0a7a844a"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("b5ad0209-97cb-4ec0-a84a-72e40ca2bbaf"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("a550c68e-987c-4607-88b1-e32528d8411e"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("18ff0665-f933-4b1b-8d32-12590eed6b1d"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("40085aa3-198f-47b0-beca-8e435b42c984"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("0466947f-6e49-416f-9b05-d93ff4c02367"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("9a22c893-74cf-4d4e-8dbb-3c8e164d9dc6"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("90ab31ef-b716-4d44-8303-d2e1da168485"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("4dc5a364-29ea-4e7f-99e8-9d4dedb21688"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("c9e6a9cf-853b-44e5-b877-3d8d868051c8"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("0babf7b4-15d2-4f96-bed7-f0844647f895"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("446443b4-e47d-4ecd-8f1b-a5b870c2bfa9"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("0fe96c56-7660-4229-b22f-8e177b200b38"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("1036304c-4517-4bce-b7c6-d16c486d34f5"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("a51d353f-3ba3-4236-955c-648059a075cc"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("5a3c650c-47c4-4b10-ba87-2083017c3f9a"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("e391b77d-f3e8-4a64-9a2f-3cb0b593097f"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("1455692f-edb6-4517-b7b6-cb5d1c767bd6"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("8dd1f10c-6257-4461-88db-d801c0c591a8"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("c66dc827-6d99-4880-81c8-fc09e351e6ec"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("8ea9b377-dc59-4a06-969f-f666f18d6f87"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("725791fb-e61e-482c-bdc5-b14603b098a1"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("69d19cba-6370-4405-84f0-05525321deec"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("e5719c16-5dcb-4665-bb60-204d9c846f6e"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("6cf2ca2f-6543-4941-91be-338ca0b80355"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("a5d04194-77e1-435c-baee-c072ff236bc8"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("cd5a6c82-b02f-4db1-bd7b-8d8b53f6c81c"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("38234cb1-ee10-4bc8-96a0-db0507701211"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("3e506690-a7fd-48f2-aa04-d8de283e7b94"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("085f4fae-ab9f-4e91-a17e-784b2103f05c"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("142148a3-8937-49cf-a9da-732ed516759e"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInstitutionVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LanguageId", "ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassReceiverId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserReceiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserReceiverId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassReceiver");

                    b.Navigation("ClassSender");

                    b.Navigation("UserReceiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Reviews")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentReviews")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentReviews");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
