// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wonderworld.Persistence;

#nullable disable

namespace Wonderworld.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    partial class SharedLessonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassRecipientId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("ReviewId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("2e6785f8-37f5-431f-9a06-ddc09e72729f"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("777ae577-900a-46cb-9f78-cafa8f1f74d3"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("2f6d24f5-8f6d-49df-8d28-036349f6a097"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("8651b278-aaf9-4b5a-9c47-2a6ed5b61c02"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("8cf0c023-5717-4bcb-8eb2-b310adc98ef9"),
                            Title = "Literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("b85d0f51-ea28-466e-aa9a-ea70f4a53868"),
                            Title = "ComputerScience"
                        },
                        new
                        {
                            DisciplineId = new Guid("18918edf-9ec8-4b76-a6f5-5f03f9f90451"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("dc09e61a-107c-434b-909c-d864405762cb"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("2d43dfd1-8283-4afd-bcda-14fbf979e8d4"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("83252af8-4f24-4970-bc4b-06202f11a9f1"),
                            Title = "Art"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("4125c72d-3d77-4a6f-b1c0-ea7f7800ef31"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("1ed89b6e-9da2-4f6f-8b7c-4cb098915226"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("07f2cca5-c586-48e8-a779-084baad8ee9b"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("da69c393-01e6-4bbc-a141-9106806ed4c9"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("30cdc179-bd1b-4088-9a32-e12263c9e5ce"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("c5923ad0-b41c-47a5-b225-1ecfa8fd4042"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("2cb72052-aef3-4e20-90af-348f55537f39"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("a1e41239-4597-4875-be6e-c0e63bba2ade"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("0894be82-effe-4147-a41c-92917125452a"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("e2c174b1-1410-451b-8104-013bbb2c3aa5"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("57ea8377-51d4-4aba-bf67-9beae03cbc3f"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("d012865a-7190-4e61-9d3d-565031c32618"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("9cbe5adb-aaac-4e1e-8677-a24cff5aa5ff"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("393612e4-005c-441c-922f-690190d51520"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("678b43a6-74c8-415a-993f-623490dfc591"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("b7664e4a-4fc6-456a-b91d-d068797a422f"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("57b42ee1-8662-44eb-b3a9-c9ab3b2d67da"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("89f2db5a-dad8-4d0d-8b83-e46dbd3be684"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("65e155f2-8a44-4f87-9b0c-2b179a3cf364"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("753d68c9-0d80-41b2-8270-c3f971f94ce7"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("25846d61-18ee-48ea-a101-9fe14c40fe26"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("ccc5c4f6-a634-4204-91df-e1b9d206d349"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("0d14e1c6-c221-4eb5-93e3-df071e25166f"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("84c6f09d-f22d-4552-acb4-f0e4918f085c"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("f18c882f-2582-4d18-8849-7812c7fd2424"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("82a061f6-8fe4-4d38-b397-2b69bbcdf5e5"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("509b8b5a-28b0-4170-bd48-961247cb8029"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("d0d2bf35-d7d3-48fb-aa19-65d87e785437"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("00e6c22b-cf1b-4787-bdb7-b723d97275a9"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("8b2d725f-b557-4e07-95c1-1bbd07a81384"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("5dea9ea9-4c1d-4584-b224-3224491d0391"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("a18951e2-c8e4-4e84-82cf-e85334b20d36"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("3d2a5998-5a06-4dc1-b5c7-c6d57f7c41cd"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("992b818a-ed7d-4536-badc-23952947abaf"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("90f21c69-34c6-4f3c-a54e-d88292caec35"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("efa0a773-85d5-410e-a81c-21d120a942f2"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassRecipient");

                    b.Navigation("ClassSender");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Reviews")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentReviews")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentReviews");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
