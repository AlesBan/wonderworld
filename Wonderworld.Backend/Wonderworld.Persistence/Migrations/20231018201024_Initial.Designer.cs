// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wonderworld.Persistence;

#nullable disable

namespace Wonderworld.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    [Migration("20231018201024_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassRecipientId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("ReviewId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("0fa5be51-007e-4678-8c03-a73aefa881c0"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("c35fa09a-d61b-4eed-ae82-bf0a62de7299"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("93adbe2d-6806-4695-8963-2971b57dea49"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("da8786e5-b34b-464f-a98c-76a48e2616bf"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("cfa08343-3f0a-4b4c-8d23-17bf69d4d33a"),
                            Title = "Literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("39369a89-bea0-460d-a961-9639872625e5"),
                            Title = "ComputerScience"
                        },
                        new
                        {
                            DisciplineId = new Guid("9292bf1e-e236-4a70-9f0d-5cda5dd14a79"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("d3eb6a20-6102-459c-9478-7e55b6d94b99"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("32c9bd6b-6ee3-4ba6-949a-c4eb5179e2ed"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("743f7f57-7fbd-4299-b298-0d9d4f381467"),
                            Title = "Art"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("fcdb16e4-74a3-4827-bee5-11d7189980f8"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("d7986ffe-0510-4a14-8d91-a2dd95fa50de"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("1708cbbd-2d0a-4be2-8cf8-715683342d98"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("24d4d6b8-bf01-4820-bb10-72b62ea209b7"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("eeb65c3a-323c-4cee-9358-0a4278149206"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("8bbc2ae0-107c-48fc-8930-704ef2155ad8"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("6c305ded-b2f6-442e-9393-5005bf9d8be3"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("ee03965d-63ff-444a-a80b-13ae358eb681"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("90818e6c-88af-40b9-8036-a8832169630f"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("0a916a2d-9f07-4520-a2bb-0469b76aa975"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("f92160e5-d98f-4d75-9d9d-ab7bce9d1e58"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("a7e9e658-57e1-417a-9fe7-f240488301c2"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("507130b0-cada-4f1e-9f6a-efefe95038f5"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("892c9fc8-460b-40c1-ae30-b9a4047dc889"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("54c6ee34-8c8c-46fe-a135-d34d5413ba67"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("ee52141f-ddcc-45d8-9091-d34b1d880e77"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("a2092fff-b29d-48ac-ab7e-182f90553bdd"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("d9e29edf-419d-43d9-85e7-b6d179492ad4"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("2bd11604-91b3-49ad-9677-41fe120f949a"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("bb0ffdba-172b-4b7a-a378-46f0eaf234e5"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("66b48e6e-0607-42b2-b8cd-3b11b25c184c"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("e0680e53-889d-4467-aace-ea7ed46f3a6f"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("b3688ebe-86cc-4ee1-b3bb-fa6256eab882"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("56329cc7-dfbb-4be6-86c2-8b8b48b6c8ab"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("06d305df-f3dd-4108-a346-e860f6363808"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("c9b8c229-a4a6-406e-ba89-d645c3c7685f"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("d78779ac-7e48-4cbf-af0a-e0ecac0aca9e"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("1851ca4a-869c-4359-8a2c-d20e4547cff9"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("73e81559-ac9a-44e7-b3a5-f88b70885aa7"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("0ecca45e-ef4f-4405-96d5-cf75ec20bce7"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("1a41e762-0757-43dc-a0b7-298b10faea44"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("781f0a5a-dca3-434e-a165-5bd1ab2b347a"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("e370360f-3daa-435d-8f29-8eaf1d48cd62"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c4c11307-0235-484f-b0e9-2628ac5241eb"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("b7dc629b-e908-4ca6-9daa-bb51f5e5aad2"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("321de9b5-9a65-41e6-bbba-bdc7e98d592d"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInstitutionVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassRecipient");

                    b.Navigation("ClassSender");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Reviews")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentReviews")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentReviews");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
