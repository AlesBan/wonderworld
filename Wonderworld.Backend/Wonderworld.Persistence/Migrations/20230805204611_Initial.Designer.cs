// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wonderworld.Persistence;

#nullable disable

namespace Wonderworld.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    [Migration("20230805204611_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassId1")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassId1");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassRecipientId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("02740c6d-223b-4953-8a01-c54c16436dd9"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("0eee2d64-54e8-4fbc-9224-4defb5fb2ddf"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("ed43be3e-1341-4857-843a-5b47b55306f5"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("c551e9bc-a9cd-47e8-9a16-687a2027002c"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("a754f80a-c1c0-4aec-9d42-ab6e30fb37ce"),
                            Title = "Literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("6293b70d-fcf5-42cd-9933-9db08a160e7a"),
                            Title = "ComputerScience"
                        },
                        new
                        {
                            DisciplineId = new Guid("24ac3cc5-9335-48db-901b-e581bdf839b8"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("2b10cd21-a61a-4cf6-8b3e-c1273bf52617"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("06c8ddea-2321-46a4-beb4-5b7947791e56"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("ce529ac1-89e1-4095-a553-a90943f7790c"),
                            Title = "Art"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("b1473ff4-39ef-40f1-bb1a-23c7cf036fac"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("58476213-5bdd-46dd-a904-76166bea5581"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("1e3df4d9-fcc3-49c6-be71-5e5a1c8a6b13"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("32344afe-a4b3-4137-b050-b5fc4ec869b1"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("f528e6f7-b918-4c2c-8b31-4837b19b5cc5"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("5a476302-3dea-4a7b-b42e-6c1eb891bdec"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("7825f406-cdd6-4647-ae7e-9ffc26177de4"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("9410550c-7df7-4fd5-ac8f-a71372d18816"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("c917c332-2c30-494c-b4c4-93f0fa152946"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("a1a9c2e6-f39a-472f-9c6e-d64e86ea3b8a"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("a0d91032-b371-498a-a5c3-9e59341d7a0e"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("cdaca36c-f273-4bd9-b2fe-726f86435fe1"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("9636cf4d-8b67-4061-8ead-ef0b482b60d7"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("557b8744-294f-44a9-92a8-83479e8989f5"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("8ce2d8f1-0136-4ad5-ab8a-569264c7dcb2"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("ef826e19-452d-407c-a1d3-5be893831713"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("ace16174-815f-4661-92e1-e8eb23d1ffff"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("a1dc162a-8756-4246-bde0-0cd3f662827a"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("c427c334-4468-4b17-b3d3-d17a4fc76c26"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("821cb7ef-7033-44b9-b32e-2d043bda62b4"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("226b0693-354e-4108-aa33-c6410ae7d700"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("efc99b67-b235-440d-af0c-9807653f10a8"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("d1f148af-85b8-4d38-8c1a-7effcf660499"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("9af93013-c9f3-48f7-8935-9079072f6554"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("66a720d0-9dca-4048-bb00-29df003440d1"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("ca140106-79c5-4709-a5b2-eda25f364f6d"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("ccfb7ab5-c80f-4b54-a6f1-cf476bbc6f1e"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("c6502dad-5d49-4a35-8015-f6acd3d7492a"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("aa722dc8-8c62-43e9-b466-98304fca89a0"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Establishment", b =>
                {
                    b.Property<Guid>("EstablishmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("EstablishmentId");

                    b.HasIndex("CityId");

                    b.HasIndex("EstablishmentId")
                        .IsUnique();

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short>("Age")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4db5b138-f32e-4aee-a63c-ee6e752a936a"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("3568f759-6b29-425f-82a3-2084b52e2c68"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("1ca81997-86ef-4379-a40f-b25370c50676"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityLocationId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EstablishmentId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityLocationId");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Feedback", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", null)
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("ClassId");

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", null)
                        .WithMany("SentFeedbacks")
                        .HasForeignKey("ClassId1");

                    b.HasOne("Wonderworld.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithOne("Feedback")
                        .HasForeignKey("Wonderworld.Domain.Entities.Communication.Feedback", "InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", null)
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("UserId");

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", null)
                        .WithMany("SentFeedbacks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Invitation");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassRecipient");

                    b.Navigation("ClassSender");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Establishment", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "City")
                        .WithMany("Establishments")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "CityLocation")
                        .WithMany("Users")
                        .HasForeignKey("CityLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Job.Establishment", "Establishment")
                        .WithMany("Users")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("CityLocation");

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Establishment", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentFeedbacks");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentFeedbacks");

                    b.Navigation("SentInvitations");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
