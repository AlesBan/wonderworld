// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wonderworld.Persistence;

#nullable disable

namespace Wonderworld.Persistence.Migrations
{
    [DbContext(typeof(SharedLessonDbContext))]
    [Migration("20231016160037_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClassRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateOfInvitation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.HasKey("InvitationId");

                    b.HasIndex("ClassRecipientId");

                    b.HasIndex("ClassSenderId");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Rating")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ReasonForNotConducting")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserRecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasTheJointLesson")
                        .HasColumnType("boolean");

                    b.HasKey("ReviewId");

                    b.HasIndex("InvitationId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("UserRecipientId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Property<Guid>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineId")
                        .IsUnique();

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            DisciplineId = new Guid("3e2c055f-e9cf-4da4-ac31-ee5807ce84b2"),
                            Title = "Biology"
                        },
                        new
                        {
                            DisciplineId = new Guid("20d9f406-6e62-41c7-8d35-2d746e2dae9d"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            DisciplineId = new Guid("1012fa7c-13e3-41a9-b48c-50e2083d7580"),
                            Title = "Physics"
                        },
                        new
                        {
                            DisciplineId = new Guid("51b7d7fe-9993-4de7-85a3-9a2d74d2c69d"),
                            Title = "Mathematics"
                        },
                        new
                        {
                            DisciplineId = new Guid("1b07a4bc-38e3-4a56-80c4-9c0abbd47271"),
                            Title = "Literature"
                        },
                        new
                        {
                            DisciplineId = new Guid("3890b37e-c1af-45c5-836c-99a90d5bac44"),
                            Title = "ComputerScience"
                        },
                        new
                        {
                            DisciplineId = new Guid("96f93fad-28f6-4fa3-8c34-fff57d69f075"),
                            Title = "Geography"
                        },
                        new
                        {
                            DisciplineId = new Guid("ec5ffd0f-080c-4f25-849c-d6e38f101eb7"),
                            Title = "History"
                        },
                        new
                        {
                            DisciplineId = new Guid("9932dd33-dfc4-47c9-8edb-252aec115e8b"),
                            Title = "Music"
                        },
                        new
                        {
                            DisciplineId = new Guid("25052923-eea0-4dc4-9eea-3567307fd398"),
                            Title = "Art"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("GradeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeId = new Guid("fd474218-81d2-433f-882f-0a2d1c071b9e"),
                            GradeNumber = 1
                        },
                        new
                        {
                            GradeId = new Guid("dc63487f-b919-43d2-bfb3-12f1a8030455"),
                            GradeNumber = 2
                        },
                        new
                        {
                            GradeId = new Guid("4614dd2a-8799-4118-b8e4-5cc3972c1d63"),
                            GradeNumber = 3
                        },
                        new
                        {
                            GradeId = new Guid("7601508d-cde4-41fc-a5d8-b743acfc5622"),
                            GradeNumber = 4
                        },
                        new
                        {
                            GradeId = new Guid("7bbc567e-33c2-4df3-84f4-0fa02464f124"),
                            GradeNumber = 5
                        },
                        new
                        {
                            GradeId = new Guid("44fd6c3c-484e-4adf-ac1c-807b2e608c5e"),
                            GradeNumber = 6
                        },
                        new
                        {
                            GradeId = new Guid("393c5e7d-5131-44c1-80a0-78d810c94288"),
                            GradeNumber = 7
                        },
                        new
                        {
                            GradeId = new Guid("148b2690-e624-4245-9cb6-b2ef35275016"),
                            GradeNumber = 8
                        },
                        new
                        {
                            GradeId = new Guid("b2733d2d-199f-4d21-91ab-067d498745d2"),
                            GradeNumber = 9
                        },
                        new
                        {
                            GradeId = new Guid("6980aa47-a522-4bfa-a035-f0e60ff52031"),
                            GradeNumber = 10
                        },
                        new
                        {
                            GradeId = new Guid("fc7d5e0b-6039-47bd-84ac-906f0493a96d"),
                            GradeNumber = 11
                        },
                        new
                        {
                            GradeId = new Guid("50cb8ae6-be1b-4d20-a8b6-149d4ba3be79"),
                            GradeNumber = 12
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("4b5e3e56-e8d0-4075-9932-11d2d1ecf781"),
                            Title = "Russian"
                        },
                        new
                        {
                            LanguageId = new Guid("5fc6f5be-ea44-4a4f-9668-8d03c79fc5a0"),
                            Title = "English"
                        },
                        new
                        {
                            LanguageId = new Guid("32fdfdfd-a357-42ad-bd24-63e406f8681f"),
                            Title = "German"
                        },
                        new
                        {
                            LanguageId = new Guid("9495fbf4-97c5-4191-b279-9de52beb57c3"),
                            Title = "Italian"
                        },
                        new
                        {
                            LanguageId = new Guid("159cd2e2-b0d8-4753-9ac2-a1aafa1c62ed"),
                            Title = "Spanish"
                        },
                        new
                        {
                            LanguageId = new Guid("ab0cc68c-b75b-4c73-922c-240e8639ffa5"),
                            Title = "French"
                        },
                        new
                        {
                            LanguageId = new Guid("73783080-a6d5-4b17-9448-bb77956b1358"),
                            Title = "Hungarian"
                        },
                        new
                        {
                            LanguageId = new Guid("b8f794c3-a7a4-4149-b12c-eba7e93919e1"),
                            Title = "Portuguese"
                        },
                        new
                        {
                            LanguageId = new Guid("1cf953ef-8f0c-45c7-8c5a-a6481708970a"),
                            Title = "Belarusian"
                        },
                        new
                        {
                            LanguageId = new Guid("08434faf-3993-4a01-998f-010131f826cc"),
                            Title = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = new Guid("4d630f97-1e28-4ab0-8eaf-bf374d844304"),
                            Title = "Armenian"
                        },
                        new
                        {
                            LanguageId = new Guid("572300a7-ec81-4ecf-9a8f-6cccfa75d0d2"),
                            Title = "Georgian"
                        },
                        new
                        {
                            LanguageId = new Guid("8e81bcfb-f256-4bf4-86c2-1116b010794f"),
                            Title = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = new Guid("3289538d-dcdb-44b0-8d3c-e691d7f5a44c"),
                            Title = "Kazakh"
                        },
                        new
                        {
                            LanguageId = new Guid("9127abbb-b393-484e-bc78-6b0d1591da2c"),
                            Title = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = new Guid("33e7beeb-c01d-4c71-a850-6ae66dfbf992"),
                            Title = "Tajik"
                        },
                        new
                        {
                            LanguageId = new Guid("fbbc523c-7f71-4dd7-bdb2-b1459a6b0078"),
                            Title = "Uzbek"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("CityId");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("InstitutionTypeId");

                    b.HasIndex("InstitutionTypeId")
                        .IsUnique();

                    b.ToTable("InstitutionTypes");

                    b.HasData(
                        new
                        {
                            InstitutionTypeId = new Guid("cdbd52d8-ee4f-4758-974c-84e573d3b042"),
                            Title = "School"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("4d594e01-1c9c-4edd-bcd2-d8ca95d52fdb"),
                            Title = "Gymnasium"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("e80411df-a2ac-4235-bb89-60bb71f5fcf1"),
                            Title = "Lyceum"
                        },
                        new
                        {
                            InstitutionTypeId = new Guid("74bc084b-2e66-4955-929b-3bc34be68b32"),
                            Title = "College"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("7662f593-620f-4d0b-9bdb-6235fe0ddefe"),
                            Title = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("b1e6a379-f571-498a-ab3d-94d6bba4782a"),
                            Title = "User"
                        },
                        new
                        {
                            RoleId = new Guid("2cb8a171-f1f8-474c-a72f-4b3872a84e9a"),
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BannerPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsATeacher")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAnExpert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("LastOnlineAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ClassId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("ClassDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "ClassId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("ClassLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.HasKey("InstitutionTypeId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTypeId", "InstitutionId")
                        .IsUnique();

                    b.ToTable("InstitutionTypesInstitutions");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UserId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId", "GradeId")
                        .IsUnique();

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId", "LanguageId")
                        .IsUnique();

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ClassRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "ClassSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("ClassSenderId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("UserRecipientId")
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("UserSenderId")
                        .IsRequired();

                    b.Navigation("ClassRecipient");

                    b.Navigation("ClassSender");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Review", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Communication.Invitation", "Invitation")
                        .WithMany("Reviews")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserRecipient")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "UserSender")
                        .WithMany("SentReviews")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");

                    b.Navigation("UserRecipient");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", null)
                        .WithMany("Establishments")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Location.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Location.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("ClassDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.ClassLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Class", "Class")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("ClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.InstitutionTypeInstitution", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Job.Institution", "Institution")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Job.InstitutionType", "InstitutionType")
                        .WithMany("InstitutionTypes")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserDiscipline", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Discipline", "Discipline")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserDisciplines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserGrade", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserLanguage", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Education.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.EntityConnections.UserRole", b =>
                {
                    b.HasOne("Wonderworld.Domain.Entities.Main.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wonderworld.Domain.Entities.Main.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Communication.Invitation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Discipline", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("UserDisciplines");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Education.Language", b =>
                {
                    b.Navigation("ClassLanguages");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.Institution", b =>
                {
                    b.Navigation("InstitutionTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Job.InstitutionType", b =>
                {
                    b.Navigation("InstitutionTypes");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Establishments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Class", b =>
                {
                    b.Navigation("ClassDisciplines");

                    b.Navigation("ClassLanguages");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Wonderworld.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("SentInvitations");

                    b.Navigation("SentReviews");

                    b.Navigation("UserDisciplines");

                    b.Navigation("UserGrades");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
